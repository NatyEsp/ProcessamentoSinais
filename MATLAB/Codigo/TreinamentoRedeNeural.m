function [ resultado_rede ] = TreinamentoRedeNeural(entradas, saidas)
%   Solve a Pattern Recognition Problem with a Neural Network
%   Script generated by Neural Pattern Recognition app
%   Created 04-Nov-2019 07:15:37
%
%   This script assumes these variables are defined:

    x = entradas;
    t = saidas;

%   Choose a Training Function
%   For a list of all training functions type: help nntrain
%   'trainlm' is usually fastest.
%   'trainbr' takes longer but may be better for challenging problems.
%   'trainscg' uses less memory. Suitable in low memory situations.
    trainFcn = 'trainbr';  % Scaled conjugate gradient backpropagation.

%   Create a Pattern Recognition Network
    hiddenLayerSize = 25;
    net = patternnet(hiddenLayerSize, trainFcn);

%   Setup Division of Data for Training, Validation, Testing
    net.divideParam.trainRatio = 75/100;
    net.divideParam.valRatio = 15/100;
    net.divideParam.testRatio = 10/100;

%   Train the Network
    [net,tr] = train(net,x,t);

%   Test the Network
    y = net(x);
    e = gsubtract(t,y);
    performance = perform(net,t,y)
    tind = vec2ind(t);
    yind = vec2ind(y);
    percentErrors = sum(tind ~= yind)/numel(tind);

%   View the Network
    view(net)

%   Plots
%   Uncomment these lines to enable various plots.
%   figure, plotperform(tr)
%   figure, plottrainstate(tr)
%   figure, ploterrhist(e)
    figure, plotconfusion(t,y)
    figure, plotroc(t,y)
    
    resultado_rede = net;
end

